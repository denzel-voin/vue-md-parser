import { extractComputedBody } from "../extractCode/extractComputedBody.js";

export const descriptionComputed = (description, scriptContent) => {
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è computed-—Å–≤–æ–π—Å—Ç–≤
  const keywords = ["–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç", "–í—ã—á–∏—Å–ª—è–µ—Ç", "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç"];

  const computedDocs = [
    ...scriptContent.matchAll(
      /\/\*\*([\s\S]*?)\*\/\s*\n\s*const\s*([\w\d_]+)\s*=\s*computed\s*\(\s*(\([^\)]*\))?\s*[^)]+\)/g
    ),
  ];

  if (computedDocs.length === 0) return description; // –ï—Å–ª–∏ computed –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º

  description += `## –û–ø–∏—Å–∞–Ω–∏–µ computed:\n\n`;

  computedDocs.forEach(match => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—ã—Ä–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let rawComment = match[1];
    let lines = rawComment
      .replace(/\*+/g, '')
      .split('\n')
      .map(line => line.trim())
      .filter(line => line !== "");

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    let descLine = "";
    for (const line of lines) {
      if (keywords.some(keyword => line.includes(keyword))) {
        descLine = line;
        break;
      }
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥ @computed, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    descLine = descLine.replace(/@computed\s*/, '').trim();

    const functionName = match[2];

    description += `<details>\n<summary>üöÄ <strong>${functionName}</strong> - ${descLine}</summary>\n\n`;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ computed-—Å–≤–æ–π—Å—Ç–≤–∞
    const computedCode = extractComputedBody(scriptContent, functionName);
    if (computedCode) {
      description += `\`\`\`js\n${computedCode}\n\`\`\`\n`;
    }

    description += `</details>\n\n`;
  });

  return description;
};
