import { extractArrowFunctionBody } from "../extractCode/extractArrowFunctionBody.js";

export const descriptionArrowFunctions = (description, scriptContent) => {
  // –ó–∞–¥–∞—ë–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
  const keywords= ["–§–∏–ª—å—Ç—Ä—É–µ—Ç", "–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç"];

  const arrowFunctionDocs = [
    ...scriptContent.matchAll(
      /\/\*\*([\s\S]*?)\*\/\s*\n\s*(?:export\s+)?(async\s+)?(const|let|var)?\s*([\w\d_]+)\s*=\s*(async\s*)?\(([^)]*)\)\s*=>/g
    )
  ];

  if (arrowFunctionDocs.length === 0) return description; // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≤—ã—Ö–æ–¥–∏–º

  description += `## –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n\n`;

  arrowFunctionDocs.forEach((match) => {
    const jsDocComment = match[1]; // JSDoc-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const functionName = match[4]; // –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    const functionArgs = (match[6] || "").trim(); // –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏

    // –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    let lines = jsDocComment
      .replace(/\*+/g, '')
      .split('\n')
      .map(line => line.trim())
      .filter(line => line !== "");

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–≥–æ–º @arrowFunc, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    lines = lines.filter(line => !line.includes('@arrowFunc'));

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "@param" –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    let arrowFuncDescriptionLine = "";
    for (const line of lines) {
      if (!line.includes('@param') && keywords.some(keyword => line.includes(keyword))) {
        arrowFuncDescriptionLine = line;
        break;
      }
    }

    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â—É—é "@param"
    if (!arrowFuncDescriptionLine) {
      arrowFuncDescriptionLine = lines.find(line => !line.includes('@param')) || "";
    }

    const arrowFuncDescription = arrowFuncDescriptionLine.trim();

    description += `<details>\n<summary>üõ†Ô∏è <strong>${functionName}</strong> - ${arrowFuncDescription}</summary>\n\n`;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ @param –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    const paramDescriptions = {};
    const paramTypes = {};
    const paramMatches = [...jsDocComment.matchAll(/@param\s+\{([^}]+)\}\s+(\w+)\s+(.+)/g)];
    paramMatches.forEach(paramMatch => {
      const type = paramMatch[1].trim();
      const paramName = paramMatch[2].trim();
      const paramDesc = paramMatch[3].trim();
      paramTypes[paramName] = type;
      paramDescriptions[paramName] = paramDesc;
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
    if (functionArgs) {
      const argsList = functionArgs.split(',').map(arg => arg.trim()).filter(arg => arg);
      if (argsList.length > 0) {
        description += `**–ê—Ä–≥—É–º–µ–Ω—Ç—ã:**\n\n`;
        description += `| –ò–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ |\n`;
        description += `|--------------|-----|----------|\n`;
        argsList.forEach(arg => {
          description += `| \`${arg}\` | \`${paramTypes[arg] || 'any'}\` | ${paramDescriptions[arg] || '-'} |\n`;
        });
        description += `\n`;
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è extractArrowFunctionBody –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
    const arrowFunctionCode = extractArrowFunctionBody(scriptContent, functionName);
    if (arrowFunctionCode) {
      description += `\`\`\`js\n${arrowFunctionCode}\n\`\`\`\n`;
    }

    description += `</details>\n\n`;
  });

  return description;
};
