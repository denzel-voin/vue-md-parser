import { extractFunctionBody } from "../extractCode/extractFunctionBody.js";

export const descriptionFunctions = (description, scriptContent) => {
  // –ó–∞–¥–∞—ë–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
  // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–ª–æ–≤.
  const keywords= ["–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç", "–£–ø—Ä–∞–≤–ª—è–µ—Ç", "–í—ã–ø–æ–ª–Ω—è–µ—Ç"];

  // –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "function"
  const functionDocs = [
    ...scriptContent.matchAll(
      /(?:\n|^)\s*\/\*\*([\s\S]*?)\*\/\s*\n\s*function\s+([\w_]+)\s*\(([^)]*)\)/g
    )
  ];

  if (functionDocs.length === 0) return description; // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

  description += `## –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:\n\n`;

  functionDocs.forEach(match => {
    const functionName = match[2]; // –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    const functionArgs = (match[3] || "").trim(); // –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    const jsDocComment = match[1]; // JSDoc-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã (–∑–≤—ë–∑–¥–æ—á–∫–∏) –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = jsDocComment
      .replace(/\*+/g, '')
      .split('\n')
      .map(line => line.trim())
      .filter(line => line !== "");

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "@function", —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —Ç–µ–≥.
    let funcDescriptionLine = "";
    for (const line of lines) {
      if (keywords.some(keyword => line.includes(keyword))) {
        funcDescriptionLine = line;
        break;
      }
    }

    // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–ª–æ–∫
    if (!funcDescriptionLine) {
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ–≥ @function, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    const funcDescription = funcDescriptionLine.replace(/@function\s*/, '').trim();

    description += `<details>\n<summary>üõ†Ô∏è <strong>${functionName}</strong> - ${funcDescription}</summary>\n\n`;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ @param –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const paramDescriptions = {};
    const paramTypes = {};
    const paramMatches = [...jsDocComment.matchAll(/@param\s+\{([^}]+)\}\s+(\w+)\s+(.+)/g)];
    paramMatches.forEach(paramMatch => {
      const type = paramMatch[1].trim();
      const paramName = paramMatch[2].trim();
      const paramDesc = paramMatch[3].trim();
      paramTypes[paramName] = type;
      paramDescriptions[paramName] = paramDesc;
    });

    // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (functionArgs) {
      const argsList = functionArgs.split(',').map(arg => arg.trim()).filter(arg => arg);
      if (argsList.length > 0) {
        description += `**–ê—Ä–≥—É–º–µ–Ω—Ç—ã:**\n\n`;
        description += `| –ò–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ |\n`;
        description += `|--------------|-----|----------|\n`;
        argsList.forEach(arg => {
          description += `| \`${arg}\` | \`${paramTypes[arg] || 'any'}\` | ${paramDescriptions[arg] || '-'} |\n`;
        });
        description += `\n`;
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è extractFunctionBody –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
    const functionCode = extractFunctionBody(scriptContent, functionName);
    if (functionCode) {
      description += `\`\`\`js\n${functionCode}\n\`\`\`\n`;
    }

    description += `</details>\n\n`;
  });

  return description;
};
