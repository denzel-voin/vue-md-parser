import path from 'path';
import fs from 'fs';

const docsDir = path.join(process.cwd(), 'docs');
const themeDir = path.join(process.cwd(), 'docs', '.vitepress', 'theme');
const componentsDir = path.join(process.cwd(), 'docs', '.vitepress', 'theme', 'components');

export function createTests() {
    if (!fs.existsSync(themeDir)) {
        fs.mkdirSync(themeDir, { recursive: true });
    }
    if (!fs.existsSync(componentsDir)) {
        fs.mkdirSync(componentsDir, { recursive: true });
    }


    const testContent =`
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

<ClientOnly>
  <TestRunner />
</ClientOnly>
  `

    const indexContent = `
  import DefaultTheme from 'vitepress/theme';
import { withMermaid } from 'vitepress-plugin-mermaid';
import TestRunner from './components/TestRunner.vue';

export default withMermaid({
  ...DefaultTheme,
  themeConfig: {
    search: {
      provider: 'local',
    },
  },
  mermaid: {
  },
  mermaidPlugin: {
    class: 'mermaid my-class',
  },
  enhanceApp({ app }) {
    app.component('TestRunner', TestRunner);
  },
});
  `

    const testRunner = `
<template>
  <div>
    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</h2>

    <!-- –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ -->
    <div v-if="results.success" class="success">‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!</div>
    <div v-else-if="results.numFailedTestSuites > 0" class="error">
      ‚ùå –û—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö: {{ results.numFailedTestSuites }} –∏–∑ {{ results.numTotalTestSuites }}
    </div>

    <!-- –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
    <div v-if="results.testResults" class="summary">
      <h3>–°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º:</h3>
      <ul>
        <li><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:</strong> {{ results.numTotalTests }}</li>
        <li>
          <strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> {{ results.numPassedTests }} ({{
            getPercentage(results.numPassedTests, results.numTotalTests)
          }}%)
        </li>
        <li>
          <strong>–ù–µ—É–¥–∞—á–Ω—ã—Ö:</strong> {{ results.numFailedTests }} ({{
            getPercentage(results.numFailedTests, results.numTotalTests)
          }}%)
        </li>
      </ul>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ -->
    <div v-if="passedTests.length">
      <h3>–£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:</h3>
      <ul>
        <li v-for="test in passedTests" :key="test.fullName">
          <strong>{{ test.fullName }}</strong> ‚úÖ ({{ test.duration }} –º—Å)
        </li>
      </ul>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ -->
    <div v-if="failedTests.length">
      <h3>–ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:</h3>
      <ul>
        <li v-for="(test, index) in failedTests" :key="test.fullName">
          <strong>{{ test.fullName }}</strong> ‚ùå ({{ test.duration }} –º—Å)
          <pre v-if="test.failureMessages.length" class="error-log">
            <button @click="toggleError(index)" class="error-toggle-btn">
              {{ isErrorVisible(index) ? '–°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏' }}
            </button>
            <div v-if="isErrorVisible(index)">
              <strong>–û–∂–∏–¥–∞–ª–æ—Å—å:</strong> {{ extractTestValue(test.failureMessages, 'Expected') }}
              <strong>–ü–æ–ª—É—á–µ–Ω–æ:</strong> {{ extractTestValue(test.failureMessages, 'Received') }}
            </div>
          </pre>
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue';

const results = ref({});
const errorMessage = ref('');
const errorVisibility = ref({});

const toggleError = (index) => {
  errorVisibility.value[index] = !errorVisibility.value[index];
};

const isErrorVisible = (index) => {
  return !!errorVisibility.value[index];
};

const getPercentage = (num, total) => {
  return ((num / total) * 100).toFixed(2);
};

onMounted(async () => {
  try {
    const response = await fetch('/test-results.json');
    const data = await response.json();
    results.value = data;

    if (!data.success) {
      errorMessage.value = data.testResults
        .map((t) => (t.failureMessages ? t.failureMessages.join('\\n') : ''))
        .join('\\n\\n');
    }
  } catch (error) {
    errorMessage.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
  }
});

const passedTests = computed(() => {
  return (
    results.value?.testResults?.flatMap((testSuite) =>
      testSuite.assertionResults
        ?.filter((test) => test.status === 'passed')
        .map((test) => ({
          ...test,
          failureMessages: test.failureMessages || [],
        })),
    ) || []
  );
});

const failedTests = computed(() => {
  return (
    results.value?.testResults?.flatMap((testSuite) =>
      testSuite.assertionResults
        ?.filter((test) => test.status === 'failed')
        .map((test) => ({
          ...test,
          failureMessages: test.failureMessages || [],
        })),
    ) || []
  );
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
const extractTestValue = (messages, type) => {
  const failureMessage = messages.find((msg) => msg.includes(type + ':'));
  if (failureMessage) {
    const match = failureMessage.match(new RegExp(\`${type}: (.*)\`));
    if (match) {
      return cleanTestMessage(match[1]);
    }
  }
  return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
};

// –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ ANSI –∫–æ–¥–æ–≤
const cleanTestMessage = (message) => {
  return message.replace(/\x1b\\[[0-9;]*m/g, '').trim();
};
</script>

<style scoped>
.success {
  color: green;
  font-weight: bold;
}

.error {
  color: red;
  font-weight: bold;
}

.warning {
  color: orange;
  font-weight: bold;
}

.error-log {
  background: rgba(255, 221, 221, 0.1);
  border-left: 4px solid red;
  padding: 5px;
  white-space: pre-wrap;
  font-family: monospace;
}

.summary {
  margin-bottom: 20px;
}

.error-toggle-btn {
  background-color: #ff6347;
  color: white;
  border: none;
  padding: 5px;
  cursor: pointer;
  margin-bottom: 5px;
}

.error-toggle-btn:hover {
  background-color: #ff4500;
}
</style>
`;

    fs.writeFileSync(path.join(docsDir, 'tests.md'), testContent);
    fs.writeFileSync(path.join(themeDir, 'index.js'), indexContent);
    fs.writeFileSync(path.join(componentsDir, 'TestRunner.vue'), testRunner);

    console.log('üìò –§–∞–π–ª—ã install.md –∏ usage.md —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ guides.');
}