import path from 'path';
import fs from 'fs';

const docsDir = path.join(process.cwd(), 'docs');
const themeDir = path.join(process.cwd(), 'docs', '.vitepress', 'theme');
const componentsDir = path.join(process.cwd(), 'docs', '.vitepress', 'theme', 'components');

export function createTests() {
    if (!fs.existsSync(themeDir)) {
        fs.mkdirSync(themeDir, { recursive: true });
    }
    if (!fs.existsSync(componentsDir)) {
        fs.mkdirSync(componentsDir, { recursive: true });
    }


    const testContent =`
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

<ClientOnly>
  <TestRunner />
</ClientOnly>
  `

    const indexContent = `
  import DefaultTheme from 'vitepress/theme';
import { withMermaid } from 'vitepress-plugin-mermaid';
import TestRunner from './components/TestRunner.vue';

export default withMermaid({
  ...DefaultTheme,
  themeConfig: {
    search: {
      provider: 'local',
    },
  },
  mermaid: {
  },
  mermaidPlugin: {
    class: 'mermaid my-class',
  },
  enhanceApp({ app }) {
    app.component('TestRunner', TestRunner);
  },
});
  `

    const testRunner = `
<template>
  <div>
    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</h2>

    <!-- –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ -->
    <div v-if="results.success" class="success">‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!</div>
    <div v-else-if="results.numFailedTestSuites > 0" class="error">
      ‚ùå –û—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö: {{ results.numFailedTestSuites }} –∏–∑ {{ results.numTotalTestSuites }}
    </div>
    <div v-else class="warning">‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</div>

    <!-- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö -->
    <pre v-if="errorMessage" class="error-log">{{ errorMessage }}</pre>

    <!-- –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
    <div v-if="results.testResults" class="summary">
      <h3>–°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º:</h3>
      <ul>
        <li><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:</strong> {{ results.numTotalTests }}</li>
        <li>
          <strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> {{ results.numPassedTests }} ({{
            getPercentage(results.numPassedTests, results.numTotalTests)
          }}%)
        </li>
        <li>
          <strong>–ù–µ—É–¥–∞—á–Ω—ã—Ö:</strong> {{ results.numFailedTests }} ({{
            getPercentage(results.numFailedTests, results.numTotalTests)
          }}%)
        </li>
      </ul>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ -->
    <div v-if="passedTests.length">
      <h3>–£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:</h3>
      <ul>
        <li v-for="test in passedTests" :key="test.fullName">
          <strong>{{ test.fullName }}</strong> ‚úÖ ({{ test.duration }} –º—Å)
        </li>
      </ul>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ -->
    <div v-if="failedTests.length">
      <h3>–ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:</h3>
      <ul>
        <li v-for="test in failedTests" :key="test.fullName">
          <strong>{{ test.fullName }}</strong> ‚ùå ({{ test.duration }} –º—Å)
          <pre v-if="test.failureMessages.length" class="error-log">
            {{ test.failureMessages.join('\\n') }}
          </pre>
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed, watch } from 'vue';

const results = ref({});
const errorMessage = ref('');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
const getPercentage = (num, total) => {
  return ((num / total) * 100).toFixed(2);
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
onMounted(async () => {
  try {
    const response = await fetch('/test-results.json');
    const data = await response.json();
    results.value = data;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    if (!data.success) {
      errorMessage.value = data.testResults
        .map((t) => (t.failureMessages ? t.failureMessages.join('\\n') : ''))
        .join('\\n\\n');
    }
  } catch (error) {}
});

// –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
const passedTests = computed(() => {
  const assertionResults = results.value?.testResults?.[0]?.assertionResults;
  return (
    assertionResults
      ?.filter((test) => test.status === 'passed')
      .map((test) => ({
        ...test,
        failureMessages: test.failureMessages || [],
      })) || []
  );
});

const failedTests = computed(() => {
  const assertionResults = results.value?.testResults?.[0]?.assertionResults;
  return (
    assertionResults
      ?.filter((test) => test.status === 'failed')
      .map((test) => ({
        ...test,
        failureMessages: test.failureMessages || [],
      })) || []
  );
});
</script>

<style scoped>
.success {
  color: green;
  font-weight: bold;
}

.error {
  color: red;
  font-weight: bold;
}

.warning {
  color: orange;
  font-weight: bold;
}

.passed {
  color: green;
}

.failed {
  color: red;
}

.error-log {
  background: rgba(255, 221, 221, 0.1);
  border-left: 4px solid red;
  padding: 5px;
  white-space: pre-wrap;
  font-family: monospace;
}

.summary {
  margin-bottom: 20px;
}

.duration {
  color: #555;
  font-style: italic;
}
</style>
`;

    fs.writeFileSync(path.join(docsDir, 'tests.md'), testContent);
    fs.writeFileSync(path.join(themeDir, 'index.js'), indexContent);
    fs.writeFileSync(path.join(componentsDir, 'TestRunner.vue'), testRunner);

    console.log('üìò –§–∞–π–ª—ã install.md –∏ usage.md —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ guides.');
}